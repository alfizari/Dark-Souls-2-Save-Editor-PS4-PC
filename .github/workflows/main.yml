name: BUILDBOT 

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-windows-64bit:
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Create Windows Executable (64-bit)
        uses: sayyid5416/pyinstaller@v1
        with:
          python_ver: '3.8'
          spec: 'src/build.spec'
          upload_exe_with_name: 'Dark_Souls_3_Save_Editor_WIN64'
 
  build-windows-32bit:
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python (32-bit)
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
          architecture: 'x86'

      - name: Install PyInstaller
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller

      - name: Create Windows Executable (32-bit)
        run: |
          pyinstaller src/build.spec
        env:
          PYTHONPATH: ${{ runner.workspace }}/src

      - name: Upload 32-Bit Executable
        uses: actions/upload-artifact@v4
        with:
          name: Dark_Souls_3_Save_Editor_WIN32
          path: dist/Dark_Souls_3_Save_Editor.exe

  build-linux_x86_64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Create Linux Executable
        uses: sayyid5416/pyinstaller@v1
        with:
          python_ver: '3.8'
          spec: 'src/build.spec'
          upload_exe_with_name: 'Dark_Souls_3_Save_Editor_LINUX_x86_64'
          
  build-macos_silicon:
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Upgrade System pip
        run: |
          python3.8 -m pip install --upgrade pip
          python3.8 -m pip --version  # Verify pip version
    
      - name: Setup Virtual Environment
        run: |
          rm -rf venv
          python3.8 -m venv venv  # Create the virtual environment

      - name: Install Dependencies
        run: |
          source venv/bin/activate
          python3.8 -m pip install --upgrade pip
          pip install setuptools wheel pyinstaller
        
      - name: Create macOS Executable
        run: |
          source venv/bin/activate  # Activate the virtual environment
          python3.8 -m pip install --upgrade pip  # Upgrade pip in venv
          python3.8 -m pip --version  # Verify venv pip version
          pyinstaller src/build_mac.spec
          # Debug the dist directory to verify output structure
          echo "Listing contents of dist/ directory:"
          ls -R dist/
        env:
          PYTHONPATH: ${{ runner.workspace }}/src

      - name: Verify .app Structure
        run: |
          # Check if the .app structure is correct
          APP_BUNDLE="dist/Dark_Souls_3_Save_Editor_App.app"
          if [ -d "$APP_BUNDLE" ]; then
            echo ".app bundle exists. Listing contents of the .app bundle:"
            ls -R "$APP_BUNDLE"
          else
            echo "Error: .app bundle not found!"
            exit 1
          fi

      - name: Create ZIP of .app Bundle
        run: |
          # Go to the dist directory and zip the entire .app bundle (not just Contents)
          cd dist
          zip -r Dark_Souls_3_Save_Editor_MAC.zip Dark_Souls_3_Save_Editor_App.app
          mv Dark_Souls_3_Save_Editor_MAC.zip ../Dark_Souls_3_Save_Editor_MAC_SILICON.zip

      - name: Upload macOS Executable
        uses: actions/upload-artifact@v4
        with:
          name: Dark_Souls_3_Save_Editor_MAC-Silicon
          path: Dark_Souls_3_Save_Editor_MAC_SILICON.zip

  build-macos_intel:
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Upgrade System pip
        run: |
          python3.8 -m pip install --upgrade pip
          python3.8 -m pip --version  # Verify system pip version
          which python3.8  # Ensure python3.8 is being used
          which pip  # Ensure pip from python3.8 is being used

      - name: Setup Virtual Environment
        run: |
          rm -rf venv  # Remove any previous virtual environments
          python3.8 -m venv venv  # Create the virtual environment
          source venv/bin/activate  # Activate the virtual environment
          python3.8 -m pip --version  # Verify pip version in virtual environment
          which python  # Verify which python binary is being used in venv
          which pip  # Verify which pip binary is being used in venv

      - name: Install Dependencies
        run: |
          source venv/bin/activate  # Activate the virtual environment
          python3.8 -m pip install --upgrade pip  # Ensure pip is the latest version in venv
          python3.8 -m pip --version  # Verify venv pip version
          which python  # Ensure correct python is used inside venv
          which pip  # Ensure correct pip is used inside venv
          pip install setuptools wheel pyinstaller

      - name: Create macOS Intel Executable
        run: |
          source venv/bin/activate  # Activate the virtual environment
          python3.8 -m pip install --upgrade pip  # Ensure pip is the latest version in venv before building
          python3.8 -m pip --version  # Verify pip version before building
          which python  # Ensure correct python is used inside venv before building
          which pip  # Ensure correct pip is used inside venv before building
          # Set environment variables to build for Intel architecture (x86_64)
          arch -x86_64 pyinstaller src/build_mac.spec
          # Debug the dist directory to verify output structure
          echo "Listing contents of dist/ directory:"
          ls -R dist/
        env:
          PYTHONPATH: ${{ runner.workspace }}/src

      - name: Verify .app Structure
        run: |
          # Check if the .app structure is correct
          APP_BUNDLE="dist/Dark_Souls_3_Save_Editor_App.app"
          if [ -d "$APP_BUNDLE" ]; then
            echo ".app bundle exists. Listing contents of the .app bundle:"
            ls -R "$APP_BUNDLE"
          else
            echo "Error: .app bundle not found!"
            exit 1
          fi

      - name: Create ZIP of .app Bundle
        run: |
          # Go to the dist directory and zip the entire .app bundle (not just Contents)
          cd dist
          zip -r Dark_Souls_3_Save_Editor_MAC.zip Dark_Souls_3_Save_Editor_App.app
          mv Dark_Souls_3_Save_Editor_MAC.zip ../Dark_Souls_3_Save_Editor_MAC_INTEL.zip

      - name: Upload macOS Intel Executable
        uses: actions/upload-artifact@v4
        with:
          name: Dark_Souls_3_Save_Editor_MAC-Intel
          path: Dark_Souls_3_Save_Editor_MAC_INTEL.zip 
        